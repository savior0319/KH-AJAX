@ Ajax
-> Asynchronous JavaScript and XML 이란 용어로써 2005년 2월 제시 제임스 카렛이 처음
사용하면서 알려지게 되었음
-> 서버로부터 데이터를 가져와 전체 페이지를 새로 고치치 않고 일부만 로드 할 수 있게
하는 기법으로 비동기식 요청을 보내는데 필요한 기술을 말함

@ Ajax의 장단점
## 장점 ##
-> 비동기식 방식으로 웹서버의 응답을 기다리지 않고 데이터르 빠르게 처리함
-> 페이지 리로딩 없이 처리됨
예 ) 실시간 검색어, 검색어 자동완성 등

## 단점 ##
-> 한 페이지에 지속적으로 사용시 리소스가 계속 쌓여 페이지가 느려짐
-> 스크립트로 되어 있어 에러 발생 시 디버깅이 어려움

@ 동기식 처리와 비동기식 처리됨

## 동기식 처리 모델 ##
-> 페이지가 로드 되는 동안 브라우저가 script 문을 실행 하게 되면
그 실행이 종료될 때 까지 나머지 페이지를 로드하지 않고 기다리고 있다가
그 script 문이 처리 종료 되면 페이지의 나머지 부분을 로드하는 방식

## 비동기식 처리 모델 ##
-> 페이지가 로드 되는 동안 브라우저는 먼저 서버에 데이터 요청 script 문을 실행 한 후
페이지의 나머지를 계속 로드하고 페이지와 사용자의 상호작용을 처리하며
브라우저는 요청한 데이터를 기다리고 있지 않음(멀티 쓰레드 같은 방식)

※ Ajax는 JavaScript 방식과 JQuery 방식이 있음
-> 그 중 실제로 많이 사용하는 방식은 JQuery 방식을 많이 사용함
    - 코드가 간결하고 크로스 브라우징 문제를 해결 해 줌

@ 처리 절차
1. script 문에 요청을 위한 XMLHttpRequest 객체 생성
2. 서버에 응답을 처리 할 함수 생성 및 지정
    ※ 함수는 onreadystatechange에 함수를 지정
3. open 메소드로 요청할 방법 및 요청할 대상(Server) 선정
    ※ 요청 메소드, 요청 주소, 동기/비동기 설정
4. send 메소드로 대상(Server)에 전송
    ※ post 일 때 파라미터 값 설정 / get 일때는 매개변수 값 없음
5. 응답 상태에 따라 상태 확인
    ※ readyState(데이터 응답) / status(처리결과) 값을 이용
6. 응답 완료 처리 (responseText를 이용하여 처리)


@ JQuery Ajax
-> Ajax 통신을 JQuery로 작성하게 되면 훨씬 간단하게 구현할 수 있음
-> 또한, JQuery로 Ajax를 구성하게 되면 크로스브라우징의 문제를 해결 해줌
        ※ 크로스브라우징 : 다양한 브라우저들이 같은 화면을 동일하게 보여주는 것
-> JQuery Ajax에서 가장 중요한 API는 '$.ajax' 임

$.ajax의 기본 문법
-> JQuery.ajax([settings]);
혹은
-> $.ajax([settings]);

ex)
$.ajax(
    설정 값1,
    설정 값2,
    설정 값3,
    설정 값4, ....
);

주요 속성

url : 데이터를 전송 URL
data : 서버에 전송할 데이터, key/value 형식의 객체
dataType : 서버가 리턴하는 데이터 타입(xml, json, script, html)
type : 서버로 전송하는 메소드 타입 (POST, GET)
success : ajax 통신에 성공 했을 때 호출될 이벤트 핸들러
error : ajax 통신에 실패 했을 때 호출될 이벤트 핸들러
complete : ajax 통신 시 무조건 호출을 이벤트 핸들러